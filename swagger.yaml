openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Equilibrium Computing API"
  description: "API for effective resource allocation, analytics, loyalty programs, and user management in a gamified digital wallet."
components:
  securitySchemes:
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-API-KEY"
security:
  - ApiKeyAuth: []
paths:
  # Resource Allocation Paths
  /resource_allocation/compute:
    post:
      summary: "Compute Resource Allocation"
      description: "This endpoint computes resource allocation based on given parameters."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
      responses:
        "200":
          description: "Resource Allocation Computed Successfully"
  /resource_allocation/history:
    get:
      summary: "Retrieve Allocation History"
      description: "Retrieve past resource allocations."
      parameters:
        - name: "startDate"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "date"
        - name: "endDate"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "date"
      responses:
        "200":
          description: "Allocation History Retrieved Successfully"
  /resource_allocation/adjust:
    patch:
      summary: "Adjust Resource Allocation"
      description: "Adjust existing resource allocations."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                allocationId:
                  type: "string"
                  description: "ID of the allocation to adjust."
                adjustmentFactor:
                  type: "number"
                  description: "Adjustment factor for the allocation."
      responses:
        "200":
          description: "Resource Allocation Adjusted Successfully"
  /resource_allocation/cancel:
    delete:
      summary: "Cancel Resource Allocation"
      description: "Cancel an existing resource allocation."
      parameters:
        - name: "allocationId"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Resource Allocation Cancelled Successfully"
  # Incentive Paths
  /incentives/create:
    post:
      summary: "Create a New Incentive"
      description: "Create a new incentive based on provided parameters."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  description: "Name of the incentive."
                description:
                  type: "string"
                  description: "Detailed description of the incentive."
                value:
                  type: "number"
                  description: "Incentive value in engagement points."
                expirationDate:
                  type: "string"
                  format: "date"
                  description: "Expiration date of the incentive."
      responses:
        "201":
          description: "Incentive Created Successfully"
  # Analytics Paths
  /analytics/engagement:
    get:
      summary: "Retrieve User Engagement Metrics"
      description: "Retrieve metrics related to user engagement."
      responses:
        "200":
          description: "Engagement Metrics Retrieved Successfully"
  # User Management Paths
  /user_management/register:
    post:
      summary: "Register a New User"
      description: "Register a new user in the system."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                  description: "Username for the new user."
                email:
                  type: "string"
                  format: "email"
                  description: "Email address for the new user."
                password:
                  type: "string"
                  format: "password"
                  description: "Password for the new user."
      responses:
        "201":
          description: "User Registered Successfully"
  # Loyalty Programs Paths
  /loyalty_programs/list:
    get:
      summary: "List All Loyalty Programs"
      description: "Retrieve a list of all available loyalty programs."
      responses:
        "200":
          description: "Loyalty Programs List Retrieved Successfully"
  # Budget
  /budgets/set:
    post:
      summary: "Set a budget for a user"
      description: "Creates a new budget or updates the existing budget."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: "ID of the user for whom the budget is being set."
                amount:
                  type: number
                  format: float
                  description: "The budget amount."
                category:
                  type: string
                  enum: ["Food", "Entertainment", "Transport"]
                  description: "The category for the budget."
      responses:
        201:
          description: "Budget created successfully."
        400:
          description: "Invalid input."
  /budgets/history:
    get:
      summary: "Retrieve budget history"
      description: "Returns the budget history for a user."
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation."
        404:
          description: "User not found."
  /budgets/update:
    patch:
      summary: "Update budget details"
      description: "Updates the details of an existing budget."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                budgetId:
                  type: integer
                  description: "ID of the budget to be updated."
                amount:
                  type: number
                  format: float
                  description: "The updated budget amount."
      responses:
        200:
          description: "Budget updated successfully."
        400:
          description: "Invalid input."
  # Inventory
  /inventory/add:
    post:
      summary: "Add an item to inventory"
      description: "Adds a new item to the user's inventory."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemName:
                  type: string
                  description: "Name of the item."
                quantity:
                  type: integer
                  description: "Quantity of the item."
                price:
                  type: number
                  format: float
                  description: "Price of the item."
      responses:
        201:
          description: "Item successfully added."
        400:
          description: "Invalid input."

  /inventory/list:
    get:
      summary: "List inventory items"
      description: "Retrieves a list of all items in the user's inventory."
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation."
        404:
          description: "User not found."

  /inventory/update/{item_id}:
    patch:
      summary: "Update an inventory item"
      description: "Updates the details of a specific item in the inventory."
      parameters:
        - name: item_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemName:
                  type: string
                  description: "Updated name of the item."
                quantity:
                  type: integer
                  description: "Updated quantity of the item."
                price:
                  type: number
                  format: float
                  description: "Updated price of the item."
      responses:
        200:
          description: "Item successfully updated."
        400:
          description: "Invalid input."

  /inventory/remove/{item_id}:
    delete:
      summary: "Remove an inventory item"
      description: "Deletes a specific item from the inventory."
      parameters:
        - name: item_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: "Item successfully removed."
        404:
          description: "Item not found."

  # Environmental Metrics
  /environmental_metrics/carbon_footprint:
    get:
      summary: "Retrieve Carbon Footprint Metrics"
      description: "Retrieves the user's carbon footprint metrics calculated based on their transaction and consumption data."
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
            description: "Start date for the data range."
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
            description: "End date for the data range."
      responses:
        200:
          description: "Successful retrieval of carbon footprint metrics."
        404:
          description: "User not found."
  /environmental_metrics/energy_efficiency:
    get:
      summary: "Retrieve Energy Efficiency Metrics"
      description: "Retrieves the user's energy efficiency metrics, which are calculated based on their energy consumption and transaction history."
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
            description: "Start date for the data range."
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
            description: "End date for the data range."
      responses:
        200:
          description: "Successful retrieval of energy efficiency metrics."
        404:
          description: "User not found."

  # Rewards and Coupons
  /rewards/create:
    post:
      summary: "Create a New Reward"
      description: "Creates a new reward with specified parameters."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reward"
      responses:
        201:
          description: "Successfully created new reward."
        400:
          description: "Invalid input."

  /rewards/list:
    get:
      summary: "List All Rewards"
      description: "Retrieve all rewards available for the user."
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful retrieval of rewards."
        404:
          description: "Rewards not found."

  /rewards/update/{reward_id}:
    patch:
      summary: "Update Reward Details"
      description: "Updates the details of an existing reward."
      parameters:
        - name: reward_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successfully updated reward."
        404:
          description: "Reward not found."
  /rewards/delete/{reward_id}:
    delete:
      summary: "Delete a Reward"
      description: "Deletes an existing reward based on its ID."
      parameters:
        - name: reward_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successfully deleted reward."
        404:
          description: "Reward not found."
